{"version":3,"sources":["assets/noun_pause_170042.svg","assets/noun_play_170039.svg","assets/noun_restart_170019.svg","assets/github.svg","Tetris/Time.tsx","Tetris/Overlay.tsx","models/model.ts","Tetris/tetris-matrix.tsx","Tetris/TetrisPiece.tsx","Tetris/Tetris.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Time","timeElapsedSeconds","minutes","Math","floor","seconds","css","fontSize","display","alignItems","justifyContent","Overlay","startNewGame","gameState","position","top","left","height","width","color","flexDirection","backgroundColor","isGameOver","className","score","SCORE_MULTIPLICATION_FACTOR","onClick","marginBottom","marginTop","BlockEffectType","blockColors","PieceType","key","description","blocks","rows","columns","this","type","getBlockPieceFromMatrix","currentRows","currentColumns","map","row","rowIndex","col","colIndex","O_SHAPE","T_SHAPE","I_SHAPE","L_SHAPE","J_SHAPE","Z_SHAPE","S_SHAPE","createRandomPiece","randomPieceNumber0IndexBased","random","values","length","randomColor0IndexBased","getInstance","reducer","state","action","piece","payload","defaultPosition","column","blockMatrix","activePiece","activePiecePosition","readyForNewPiece","currentOutputMatrix","getCombinedMatrix","mergedMatrix","completedRows","filter","every","item","eraseCompletedLinesFromMatrix","completedRowsCount","eventHandlingInProgress","activePiecePositionLeft","activePiecePositionRight","newActivePiecePositionDown","matrixFull","rotatedBlockMatrix","getEmptyMatrix","Array","fill","containerMatrix","childMatrix","pieceMatrixRows","pieceMatrixColumns","_containerMatrix","getMatrixCopy","pieceRow","pieceCol","incompleteLineMatrix","some","linesToadd","concat","TetrisPiece","style","textAlign","index","block","initialGameState","isGameRunning","isGamePaused","Tetris","pieceSequenceNumber","useRef","matrixFullCallback","useCallback","dispatchGameState","useReducer","undefined","dispatch","isThereSpaceForPieceBlock","pieceBlock","pieceRows","pieceCols","matrixRow","matrixCol","moveCurrentPieceDown","newDesiredPosition","console","debug","addPiece","startColumn","endColumn","isThereSpaceAvailableForNewPiece","forEach","id","moveCurrentPieceLeft","columnToBeChecked","pieceRowStart","pieceRowEnd","moveCurrentPieceRight","rotatePiece","matrix","val","reverse","resetMatrix","useTetrisMatrix","useState","randomPiecesQueue","setRandomPiecesQueue","requestNewPiece","frontPieceFormQueue","pop","current","togglePauseGame","onKeyDown","e","preventDefault","useEffect","pieceDropInterval","setInterval","clearInterval","timeElapsedUpdatingInterval","window","addEventListener","removeEventListener","margin","border","padding","gridTemplateColumns","gridTemplateRows","gridGap","paddingTop","title","src","ResumeImage","PauseImage","alt","RestartImage","hidden","background","defaultProps","App","overflowX","fontWeight","href","GithubImage","flex","aria-label","role","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2828aab5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noun_pause_170042.ca1bcf06.svg\";","module.exports = __webpack_public_path__ + \"static/media/noun_play_170039.614647a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/noun_restart_170019.8311a56a.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.ddc25012.svg\";","import React from 'react'\n/** @jsx jsx */\nimport {jsx} from '@emotion/core'\n\nexport const Time: React.FC<{timeElapsedSeconds: number}> = ({timeElapsedSeconds}) => {\n  const minutes = Math.floor(timeElapsedSeconds / 60)\n  const seconds = timeElapsedSeconds % 60\n  return (\n    <div\n      css={{\n        fontSize: '0.8rem',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      {`${minutes}:${seconds}`} M\n    </div>\n  )\n}\n","import React from 'react'\nimport {SCORE_MULTIPLICATION_FACTOR} from './Tetris'\nimport {Time} from './Time'\n\n/** @jsx jsx */\nimport {jsx} from '@emotion/core'\n\nexport function Overlay({startNewGame, gameState}: {startNewGame: () => void; gameState: any}) {\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {/* {JSON.stringify(gameState)} */}\n      <div\n        css={{\n          color: '#000',\n          display: 'flex',\n          flexDirection: 'column',\n          height: '100%',\n          width: '100%',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: 'rgba(179, 179, 179, 0.4)',\n        }}\n      >\n        {gameState.isGameOver ? (\n          <div className=\"game-over\">\n            <div className=\"title\">GAME OVER!</div>\n            <div>Lines Completed: {gameState.score / SCORE_MULTIPLICATION_FACTOR}</div>\n            <div>Score: {gameState.score}</div>\n            <div>\n              Time Played: <Time timeElapsedSeconds={gameState.timeElapsedSeconds} />\n            </div>\n          </div>\n        ) : null}\n\n        <div className=\"new-game\">\n          <button\n            onClick={startNewGame}\n            css={{\n              marginBottom: 20,\n              marginTop: 20,\n            }}\n          >\n            : NEW GAME :\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","export interface Piece {\n  type: PieceType\n  key: string\n  id?: number\n  blocks: Block[][]\n  description: string\n  currentRows: number\n  currentColumns: number\n}\n\nexport interface Position {\n  row: number\n  column: number\n}\n\nexport interface Action {\n  type: string\n  payload?: any\n}\n\nexport interface Block {\n  key?: string\n  color: string\n  effect?: BlockEffectType\n}\n\nexport enum BlockEffectType {\n  GLOW = '',\n  SEMITRANSPARENT = '',\n}\n\n/* Color classes */\nexport const blockColors = ['color-1', 'color-2', 'color-3', 'color-4', 'color-4']\n\n/* Emulated enum for Piece type, since TS does not support object values in enum */\nexport class PieceType {\n  static readonly O_SHAPE = new PieceType('O_SHAPE', 'A square piece', [[1, 1], [1, 1]], 2, 2)\n  static readonly T_SHAPE = new PieceType('T_SHAPE', 'A T shaped piece', [[1, 1, 1], [0, 1, 0]], 2, 3)\n  static readonly I_SHAPE = new PieceType('I_SHAPE', 'An I shaped piece', [[1], [1], [1], [1]], 4, 1)\n  static readonly L_SHAPE = new PieceType('L_SHAPE', 'An L shaped piece', [[1, 0], [1, 0], [1, 1]], 3, 2)\n  static readonly J_SHAPE = new PieceType('J_SHAPE', 'An J shaped piece', [[0, 1], [0, 1], [1, 1]], 3, 2)\n  static readonly Z_SHAPE = new PieceType('Z_SHAPE', 'An Z shaped piece', [[1, 1, 0], [0, 1, 1]], 2, 3)\n  static readonly S_SHAPE = new PieceType('S_SHAPE', 'An S shaped piece', [[0, 1, 1], [1, 1, 0]], 2, 3)\n\n  // private to disallow creating other instances of this type\n  private constructor(\n    private readonly key: string,\n    public readonly description: string,\n    public readonly blocks: number[][],\n    public readonly rows: number,\n    public readonly columns: number,\n  ) {}\n\n  toString() {\n    return this.key\n  }\n\n  getInstance(color: string): Piece {\n    return {\n      type: this,\n      key: this.key,\n      description: this.description,\n      blocks: this.getBlockPieceFromMatrix(color),\n      currentRows: this.rows,\n      currentColumns: this.columns,\n    }\n  }\n\n  private getBlockPieceFromMatrix(color: string): Block[][] {\n    return this.blocks.map((row, rowIndex) => {\n      return row.map((col, colIndex) => (col ? {color} : (null as any)))\n    })\n  }\n\n  static values() {\n    return [\n      PieceType.O_SHAPE,\n      PieceType.T_SHAPE,\n      PieceType.I_SHAPE,\n      PieceType.L_SHAPE,\n      PieceType.J_SHAPE,\n      PieceType.Z_SHAPE,\n      PieceType.S_SHAPE,\n    ]\n  }\n}\n\nexport interface Position {\n  row: number\n  column: number\n}\n\nexport const createRandomPiece = (): Piece => {\n  const randomPieceNumber0IndexBased = Math.floor((Math.random() * 10) % PieceType.values().length)\n  const randomColor0IndexBased = Math.floor((Math.random() * 10) % blockColors.length)\n  const randomPiece = PieceType.values()[randomPieceNumber0IndexBased].getInstance(blockColors[randomColor0IndexBased])\n  return randomPiece\n}\n","import {useReducer, useCallback, useRef, useState} from 'react'\nimport {Piece, Position, Action, Block} from '../models/model'\n\nexport interface MatrixState {\n  blockMatrix: Block[][]\n  currentOutputMatrix: Block[][] | null\n  activePiece?: Piece | null\n  activePiecePosition: Position\n  completedRowsCount: number\n  readyForNewPiece: boolean\n  matrixFull: boolean\n  eventHandlingInProgress: boolean\n}\n\nconst reducer = (state: MatrixState, action: Action): MatrixState => {\n  switch (action.type) {\n    case 'ADD_PIECE':\n      const piece: Piece = action.payload\n      const startColumn = Math.floor(state.blockMatrix[0].length / 2) - 1\n      const defaultPosition = {row: 0, column: startColumn}\n      return {\n        ...state,\n        activePiece: piece,\n        activePiecePosition: defaultPosition,\n        readyForNewPiece: false,\n        currentOutputMatrix: getCombinedMatrix(state.blockMatrix, piece ? piece.blocks : [], defaultPosition),\n      }\n    case 'MERGE_PIECE_IN_MATRIX':\n      let mergedMatrix = getCombinedMatrix(\n        state.blockMatrix,\n        state.activePiece ? state.activePiece.blocks : [],\n        state.activePiecePosition,\n      )\n      /* See if there are completed lines and erase those completed lines */\n      const completedRows = mergedMatrix.filter(row => row.every(item => item))\n      if (completedRows.length) {\n        mergedMatrix = eraseCompletedLinesFromMatrix(mergedMatrix)\n      }\n      return {\n        ...state,\n        activePiece: null,\n        activePiecePosition: {row: 0, column: 0},\n        blockMatrix: mergedMatrix,\n        currentOutputMatrix: mergedMatrix,\n        readyForNewPiece: true,\n        completedRowsCount: completedRows.length,\n        eventHandlingInProgress: false,\n      }\n    case 'LOCK_EVENT_HANDLING':\n      return {\n        ...state,\n        eventHandlingInProgress: true,\n      }\n    case 'UNLOCK_EVENT_HANDLING':\n      return {\n        ...state,\n        eventHandlingInProgress: false,\n      }\n    case 'MOVE_PIECE_TO_LEFT':\n      const activePiecePositionLeft = {row: state.activePiecePosition.row, column: state.activePiecePosition.column - 1}\n      return {\n        ...state,\n        activePiecePosition: activePiecePositionLeft,\n        currentOutputMatrix: getCombinedMatrix(\n          state.blockMatrix,\n          state.activePiece ? state.activePiece.blocks : [],\n          activePiecePositionLeft,\n        ),\n        eventHandlingInProgress: false,\n      }\n    case 'MOVE_PIECE_TO_RIGHT':\n      const activePiecePositionRight = {\n        row: state.activePiecePosition.row,\n        column: state.activePiecePosition.column + 1,\n      }\n      return {\n        ...state,\n        activePiecePosition: activePiecePositionRight,\n        currentOutputMatrix: getCombinedMatrix(\n          state.blockMatrix,\n          state.activePiece ? state.activePiece.blocks : [],\n          activePiecePositionRight,\n        ),\n        eventHandlingInProgress: false,\n      }\n    case 'MOVE_PIECE_DOWN':\n      if (!state.activePiece) {\n        return state\n      }\n      const newActivePiecePositionDown = {\n        row: state.activePiecePosition.row + 1,\n        column: state.activePiecePosition.column,\n      }\n      return {\n        ...state,\n        activePiecePosition: newActivePiecePositionDown,\n        currentOutputMatrix: getCombinedMatrix(state.blockMatrix, state.activePiece.blocks, newActivePiecePositionDown),\n        eventHandlingInProgress: false,\n      }\n    case 'MATRIX_FULL':\n      return {\n        ...state,\n        activePiece: null,\n        matrixFull: true,\n        readyForNewPiece: false,\n      }\n    case 'RESET_MATRIX':\n      return {\n        ...action.payload,\n      }\n    case 'ROTATE_PIECE':\n      const rotatedBlockMatrix = action.payload\n      const activePiece = state.activePiece\n        ? {\n            ...state.activePiece,\n            blocks: rotatedBlockMatrix,\n            currentRows: rotatedBlockMatrix.length,\n            currentColumns: rotatedBlockMatrix[0].length,\n          }\n        : null\n      return {\n        ...state,\n        activePiece,\n        currentOutputMatrix: getCombinedMatrix(state.blockMatrix, rotatedBlockMatrix, state.activePiecePosition),\n        eventHandlingInProgress: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst getEmptyMatrix = (rows: number, columns: number): Block[][] => {\n  //create empty matrix for Tetris game\n  return new Array(rows).fill(0).map(() => new Array(columns).fill(null))\n}\n\nconst getCombinedMatrix = (containerMatrix: Block[][], childMatrix: Block[][], position: Position): Block[][] => {\n  const pieceMatrixRows = childMatrix.length,\n    pieceMatrixColumns = childMatrix[0].length\n\n  const _containerMatrix = getMatrixCopy(containerMatrix)\n  for (let pieceRow = 0; pieceRow < pieceMatrixRows; pieceRow++) {\n    for (let pieceCol = 0; pieceCol < pieceMatrixColumns; pieceCol++) {\n      //bug\n      _containerMatrix[position.row + pieceRow][position.column + pieceCol] =\n        childMatrix[pieceRow][pieceCol] || _containerMatrix[position.row + pieceRow][position.column + pieceCol]\n    }\n  }\n  return _containerMatrix\n}\n\nconst eraseCompletedLinesFromMatrix = (containerMatrix: Block[][]): Block[][] => {\n  /* get all incomplete lines */\n  const incompleteLineMatrix = containerMatrix.filter(row => row.some(item => !item))\n  if (incompleteLineMatrix.length < containerMatrix.length) {\n    const linesToadd = containerMatrix.length - incompleteLineMatrix.length\n    const emptyRows = getEmptyMatrix(linesToadd, incompleteLineMatrix[0].length)\n\n    /* Return merged matrix. Its same as pushing empty lines on the top */\n    return emptyRows.concat(incompleteLineMatrix)\n  }\n  return incompleteLineMatrix\n}\n\nconst getMatrixCopy = (containerMatrix: Block[][]) => containerMatrix.map(row => row.map(col => col))\n\n/* Custom Hook */\n\nexport const useTetrisMatrix = (rows: number = 20, columns: number = 10, matrixFullCallback = () => {}): any => {\n  // const initialState = useRef()\n\n  //flag that current keypress event is getting processed, we cant process new events atm\n  const [state, dispatch] = useReducer(reducer, null, () => ({\n    blockMatrix: getEmptyMatrix(rows, columns),\n    currentOutputMatrix: getEmptyMatrix(rows, columns),\n    activePiece: undefined,\n    activePiecePosition: {row: 0, column: 0},\n    completedRowsCount: 0,\n    matrixFull: false,\n    readyForNewPiece: false,\n    eventHandlingInProgress: false,\n  }))\n\n  const isThereSpaceForPieceBlock = useCallback(\n    (pieceBlock: Block[][], position: Position) => {\n      if (!pieceBlock) {\n        return false\n      }\n\n      const pieceRows = pieceBlock.length\n      const pieceCols = pieceBlock[0].length\n      if (position.column + pieceCols > columns || position.row + pieceRows > rows) {\n        // pieceBlocks are exceeding or going outside of main block matrix\n        return\n      }\n\n      for (let matrixRow = position.row, pieceRow = 0; matrixRow < position.row + pieceRows; matrixRow++, pieceRow++) {\n        for (\n          let matrixCol = position.column, pieceCol = 0;\n          matrixCol < position.column + pieceCols;\n          matrixCol++, pieceCol++\n        ) {\n          if (pieceBlock[pieceRow][pieceCol] && state.blockMatrix[matrixRow][matrixCol]) {\n            return false\n          }\n        }\n      }\n\n      return true\n    },\n    [columns, rows, state.blockMatrix],\n  )\n\n  const moveCurrentPieceDown = useCallback((): boolean => {\n    // console.debug('moving piece down')\n\n    /* If this is last row, or if there is no space below for this piece, return false i.e. fail*/\n    if (state.eventHandlingInProgress || !state.activePiece) {\n      return false\n    }\n    dispatch({type: 'LOCK_EVENT_HANDLING'})\n\n    const newDesiredPosition: Position = {\n      row: state.activePiecePosition.row + 1,\n      column: state.activePiecePosition.column,\n    }\n    if (isThereSpaceForPieceBlock(state.activePiece.blocks, newDesiredPosition)) {\n      console.debug('spce down available')\n\n      /* there is space available. Move piece down 1 line */\n      dispatch({type: 'MOVE_PIECE_DOWN'})\n    } else {\n      console.debug('no spce down available, merging now')\n      /* If there is no space left below, combine piece with blockMatrix */\n      dispatch({type: 'MERGE_PIECE_IN_MATRIX'})\n    }\n    return true\n  }, [\n    isThereSpaceForPieceBlock,\n    state.activePiece,\n    state.activePiecePosition.column,\n    state.activePiecePosition.row,\n    state.eventHandlingInProgress,\n  ])\n\n  const addPiece = useCallback(\n    (piece: Piece) => {\n      console.debug('in add piece..', piece)\n      const isThereSpaceAvailableForNewPiece = (piece: Piece): boolean => {\n        const startColumn = piece.currentColumns === 3 || piece.currentColumns === 4 ? 4 : 5\n        const endColumn = startColumn + piece.currentColumns\n        for (let row = 0; row < piece.currentRows; row++) {\n          for (let col = startColumn; col < endColumn; col++) {\n            if (state.blockMatrix[row][col]) {\n              return false\n            }\n          }\n        }\n\n        return true\n      }\n      if (isThereSpaceAvailableForNewPiece(piece)) {\n        // add keys to block\n        piece.blocks.forEach((row: Block[], rowIndex: number) => {\n          row.forEach((block: Block, colIndex: number) => {\n            if (block) {\n              block.key = `${piece.id}-${rowIndex}-${colIndex}`\n            }\n          })\n        })\n\n        dispatch({type: 'ADD_PIECE', payload: piece})\n        return\n      }\n      /* Matrix is full, call the callback */\n      dispatch({type: 'MATRIX_FULL', payload: piece})\n      matrixFullCallback()\n    },\n    [matrixFullCallback, state.blockMatrix],\n  )\n\n  const moveCurrentPieceLeft = useCallback(() => {\n    /* If this is first column, return false i.e. fail*/\n    if (!state.activePiece || state.activePiecePosition.column === 0 || state.eventHandlingInProgress) {\n      return false\n    }\n    dispatch({type: 'LOCK_EVENT_HANDLING'})\n    // check if there is a space to left for this piece\n    const columnToBeChecked = state.activePiecePosition.column - 1\n    const pieceRowStart = state.activePiecePosition.row\n    const pieceRowEnd = state.activePiecePosition.row + state.activePiece.currentRows - 1\n    for (let row = pieceRowStart; row <= pieceRowEnd; row++) {\n      if (state.blockMatrix[row][columnToBeChecked]) {\n        dispatch({type: 'UNLOCK_EVENT_HANDLING'})\n        return false\n      }\n    }\n    /* there is space available. Move piece to left 1 column */\n    dispatch({type: 'MOVE_PIECE_TO_LEFT'})\n  }, [\n    state.activePiece,\n    state.activePiecePosition.column,\n    state.activePiecePosition.row,\n    state.blockMatrix,\n    state.eventHandlingInProgress,\n  ])\n\n  const moveCurrentPieceRight = useCallback(() => {\n    /* If this is last column, return false i.e. fail*/\n    if (\n      state.eventHandlingInProgress ||\n      !state.activePiece ||\n      state.activePiecePosition.column + state.activePiece.currentColumns >= columns\n    ) {\n      return false\n    }\n    dispatch({type: 'LOCK_EVENT_HANDLING'})\n    // check if there is a space to right for this piece\n    const columnToBeChecked = state.activePiecePosition.column + state.activePiece.currentColumns\n    const pieceRowStart = state.activePiecePosition.row\n    const pieceRowEnd = state.activePiecePosition.row + state.activePiece.currentRows - 1\n    for (let row = pieceRowStart; row <= pieceRowEnd; row++) {\n      if (state.blockMatrix[row][columnToBeChecked]) {\n        dispatch({type: 'UNLOCK_EVENT_HANDLING'})\n        return false\n      }\n    }\n\n    /* there is space available. Move piece to right 1 column */\n    dispatch({type: 'MOVE_PIECE_TO_RIGHT'})\n  }, [\n    columns,\n    state.activePiece,\n    state.activePiecePosition.column,\n    state.activePiecePosition.row,\n    state.blockMatrix,\n    state.eventHandlingInProgress,\n  ])\n\n  const rotatePiece = useCallback(() => {\n    if (state.eventHandlingInProgress || !state.activePiece) {\n      return false\n    }\n    dispatch({type: 'LOCK_EVENT_HANDLING'})\n\n    const matrix = state.activePiece.blocks || []\n    // find a transpose of block matrix\n    const rotatedBlockMatrix = matrix[0].map((val, index) => matrix.map(row => row[index]).reverse())\n\n    //check if there is a space for rotated piece\n    if (isThereSpaceForPieceBlock(rotatedBlockMatrix, state.activePiecePosition)) {\n      dispatch({type: 'ROTATE_PIECE', payload: rotatedBlockMatrix})\n    } else {\n      dispatch({type: 'UNLOCK_EVENT_HANDLING'})\n    }\n  }, [isThereSpaceForPieceBlock, state.activePiece, state.activePiecePosition, state.eventHandlingInProgress])\n\n  const resetMatrix = () => {\n    dispatch({\n      type: 'RESET_MATRIX',\n      payload: {\n        blockMatrix: getEmptyMatrix(rows, columns),\n        currentOutputMatrix: getEmptyMatrix(rows, columns),\n        activePiece: undefined,\n        activePiecePosition: {row: 0, column: 0},\n        completedRowsCount: 0,\n        matrixFull: false,\n        readyForNewPiece: true,\n        eventHandlingInProgress: false,\n      },\n    })\n  }\n\n  return [state, addPiece, moveCurrentPieceLeft, moveCurrentPieceRight, moveCurrentPieceDown, rotatePiece, resetMatrix]\n}\n","import React from 'react'\nimport {Piece, Block} from '../models/model'\n\ninterface Props {\n  piece: Piece\n}\n\nexport const TetrisPiece: React.FC<Props> = ({piece}) => {\n  return (\n    <div style={{marginBottom: 20, textAlign: 'center'}}>\n      <div>\n        {piece.blocks.map((row: Block[], index) => {\n          return (\n            <div key={index} style={{display: 'flex', justifyContent: 'center'}}>\n              {row.map((block: Block, index) => (\n                <div className={block ? `block ${block.color}` : ''} key={index} style={{width: 16, height: 16}}></div>\n              ))}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n","import {Overlay} from './Overlay'\nimport React, {useState, useCallback, useEffect, useReducer, useRef} from 'react'\nimport {createRandomPiece, Piece, Action, Block} from '../models/model'\nimport {useTetrisMatrix, MatrixState} from './tetris-matrix'\nimport {Time} from './Time'\nimport './tetris.css'\n/** @jsx jsx */\nimport {jsx} from '@emotion/core'\nimport {TetrisPiece} from './TetrisPiece'\nimport PauseImage from '../assets/noun_pause_170042.svg'\nimport ResumeImage from '../assets/noun_play_170039.svg'\nimport RestartImage from '../assets/noun_restart_170019.svg'\nimport GithubImage from '../assets/github.svg'\n\nexport const SCORE_MULTIPLICATION_FACTOR = 100\n\ninterface TetrisProps {\n  rows?: number\n  columns?: number\n}\n\ninterface GameState {\n  isGameRunning: boolean\n  isGamePaused: boolean\n  isGameOver: boolean\n  score: number\n  timeElapsedSeconds: number\n}\n\nconst initialGameState = {\n  isGameRunning: false,\n  isGamePaused: false,\n  isGameOver: false,\n  score: 0,\n  timeElapsedSeconds: 0,\n}\n\nconst reducer = (state: GameState, action: Action) => {\n  // console.debug('handling action: ', action.type)\n  switch (action.type) {\n    case 'START_NEW_GAME':\n      //console.debug('in start new game action reducer case')\n      return {\n        ...state,\n        isGameRunning: true,\n        isGamePaused: false,\n        isGameOver: false,\n        timeElapsedSeconds: 0,\n        score: 0,\n      }\n    case 'PAUSE_GAME':\n      return {\n        ...state,\n        isGameRunning: false,\n        isGamePaused: true,\n      }\n    case 'RESUME_GAME':\n      return {\n        ...state,\n        isGameRunning: true,\n        isGamePaused: false,\n      }\n    case 'GAME_OVER':\n      return {\n        ...state,\n        isGameRunning: false,\n        isGamePaused: false,\n        isGameOver: true,\n      }\n    case 'INCREMENT_SCORE_FOR_N_LINES':\n      const score = state.score + action.payload * SCORE_MULTIPLICATION_FACTOR\n      return {\n        ...state,\n        score,\n      }\n    case 'UPDATE_TIME':\n      return {\n        ...state,\n        timeElapsedSeconds: action.payload ? action.payload : state.timeElapsedSeconds + 1,\n      }\n    default:\n      return state\n  }\n}\n\nconst Tetris: React.FC<TetrisProps> = ({rows = 20, columns = 10}) => {\n  /* Persistent interval for elapsed time */\n  // let timeInterval = useRef<any>()\n\n  /* Persistent interval for moving current piece down one step at a time */\n  // let pieceDropInterval = useRef<any>()\n\n  /* Piece Id */\n  let pieceSequenceNumber = useRef<number>(0)\n\n  /* matrix board Full callback */\n  const matrixFullCallback = useCallback(() => {\n    dispatchGameState({type: 'GAME_OVER'})\n    // if (timeInterval.current) {\n    //   clearInterval(timeInterval.current)\n    // }\n    // if (pieceDropInterval.current) {\n    //   clearInterval(pieceDropInterval.current)\n    // }\n  }, [])\n\n  const [gameState, dispatchGameState] = useReducer(reducer, initialGameState)\n  const [\n    state,\n    addPiece,\n    moveCurrentPieceLeft,\n    moveCurrentPieceRight,\n    moveCurrentPieceDown,\n    rotatePiece,\n    resetMatrix,\n  ]: [\n    MatrixState,\n    (piece: Piece) => void,\n    () => void,\n    () => void,\n    () => void,\n    () => void,\n    () => void,\n  ] = useTetrisMatrix(rows, columns, matrixFullCallback)\n\n  const [randomPiecesQueue, setRandomPiecesQueue] = useState([\n    createRandomPiece(),\n    createRandomPiece(),\n    createRandomPiece(),\n  ])\n\n  const requestNewPiece = useCallback(() => {\n    const frontPieceFormQueue = randomPiecesQueue.pop()\n    if (frontPieceFormQueue) {\n      //assign a unique key to this new piece\n      frontPieceFormQueue.id = ++pieceSequenceNumber.current\n      addPiece(frontPieceFormQueue)\n      setRandomPiecesQueue([createRandomPiece(), ...randomPiecesQueue])\n    }\n  }, [addPiece, randomPiecesQueue])\n\n  const startNewGame = useCallback(() => {\n    // reset tetris matrix to initial state\n    resetMatrix()\n\n    dispatchGameState({type: 'START_NEW_GAME'})\n  }, [resetMatrix])\n\n  const togglePauseGame = useCallback(() => {\n    dispatchGameState({type: gameState.isGamePaused ? 'RESUME_GAME' : 'PAUSE_GAME'})\n  }, [gameState.isGamePaused])\n\n  const onKeyDown = useCallback(\n    (e: any) => {\n      e.preventDefault()\n      // only handle arrow keys\n      if (gameState.isGamePaused) {\n        return\n      }\n      switch (e.key) {\n        case 'ArrowLeft':\n          moveCurrentPieceLeft()\n          break\n        case 'ArrowRight':\n          moveCurrentPieceRight()\n          break\n        case 'ArrowDown':\n          moveCurrentPieceDown()\n          break\n        case 'ArrowUp':\n        case 'space':\n          rotatePiece()\n          break\n        default:\n          break\n      }\n\n      //}\n    },\n    [gameState.isGamePaused, moveCurrentPieceDown, moveCurrentPieceLeft, moveCurrentPieceRight, rotatePiece],\n  )\n\n  /* timer to move current piece */\n  useEffect(() => {\n    if (gameState.isGameRunning) {\n      // piece down interval\n      const pieceDropInterval = setInterval(() => {\n        moveCurrentPieceDown()\n      }, 1000)\n      return () => {\n        clearInterval(pieceDropInterval)\n      }\n    }\n  }, [gameState.isGameRunning, moveCurrentPieceDown])\n\n  /* timer to update time elapsed */\n  useEffect(() => {\n    if (gameState.isGameRunning) {\n      // piece down interval\n      const timeElapsedUpdatingInterval = setInterval(() => {\n        dispatchGameState({type: 'UPDATE_TIME'})\n      }, 1000)\n      return () => {\n        clearInterval(timeElapsedUpdatingInterval)\n      }\n    }\n  }, [gameState.isGameRunning])\n\n  /* add key handler */\n  useEffect(() => {\n    window.addEventListener('keydown', onKeyDown)\n    return () => {\n      window.removeEventListener('keydown', onKeyDown)\n    }\n  }, [onKeyDown])\n\n  useEffect(() => {\n    if (state.readyForNewPiece) {\n      requestNewPiece()\n    }\n  }, [requestNewPiece, state.readyForNewPiece])\n\n  useEffect(() => {\n    dispatchGameState({type: 'INCREMENT_SCORE_FOR_N_LINES', payload: state.completedRowsCount})\n  }, [state.completedRowsCount])\n\n  return (\n    <div css={{position: 'relative', height: '40rem', width: '25rem', margin: '0 auto'}}>\n      <div\n        css={{\n          backgroundColor: '#eee',\n          border: '4px solid #CCC',\n          padding: '0.5rem',\n          display: 'grid',\n          gridTemplateColumns: 'auto 4rem',\n          gridTemplateRows: 'auto 2rem',\n          gridGap: 2,\n          height: '100%',\n          width: '100%',\n        }}\n      >\n        {/* main output matrix area */}\n        <div\n          css={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${columns}, 1fr)`,\n            gridTemplateRows: `repeat(${rows}, 1fr)`,\n            gridGap: 1,\n          }}\n        >\n          {state.currentOutputMatrix &&\n            state.currentOutputMatrix.map((row: Block[], rowIndex) =>\n              row.map((block: Block, colIndex) => (\n                <div\n                  className={`block ${block ? ' active ' + block.color : ''}`}\n                  key={block ? block.key : `${rowIndex}-${colIndex}`}\n                ></div>\n              )),\n            )}\n        </div>\n        {/* upcoming random pieces */}\n        <div\n          css={{\n            // border: '1px solid #ccc',\n            textAlign: 'center',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div css={{display: 'flex', flexDirection: 'column-reverse', paddingTop: '1rem'}}>\n            {(gameState.isGameRunning || gameState.isGamePaused) && (\n              <div>\n                <div css={{fontSize: '0.5rem', marginBottom: '1rem'}}>NEXT</div>\n                {randomPiecesQueue.map((piece, index) => (\n                  <TetrisPiece key={index} piece={piece} />\n                ))}\n              </div>\n            )}\n          </div>\n          {/* restart and pause buttons */}\n          <div css={{display: 'flex', flexDirection: 'column-reverse'}}>\n            <button\n              css={{border: '1px solid #ccc', margin: '0.5rem'}}\n              title={gameState.isGamePaused ? 'Resume Game' : 'Pause Game'}\n              onClick={togglePauseGame}\n            >\n              <img\n                src={gameState.isGamePaused ? ResumeImage : PauseImage}\n                width=\"40\"\n                height=\"32\"\n                alt={gameState.isGamePaused ? 'Resume Game' : 'Pause Game'}\n              />\n            </button>\n            <button css={{border: '1px solid #ccc', margin: '0.5rem'}} title=\"Restart Game\" onClick={startNewGame}>\n              <img src={RestartImage} width=\"40\" height=\"32\" alt=\"Restart Game\" />\n            </button>\n          </div>\n        </div>\n        {(gameState.isGameRunning || gameState.isGamePaused) && (\n          <div css={{fontSize: '0.8rem', display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n            <img src=\"./assets/noun_Diamond_170032.svg\" width=\"40\" height=\"22\" alt=\"score\" /> {gameState.score}\n          </div>\n        )}\n        {(gameState.isGameRunning || gameState.isGamePaused) && (\n          <Time timeElapsedSeconds={gameState.timeElapsedSeconds} />\n        )}\n      </div>\n\n      {/* paused block */}\n      <div\n        hidden={!gameState.isGamePaused}\n        css={{\n          marginBottom: '1rem',\n          position: 'absolute',\n          top: '50%',\n          left: 'calc(50% - 90px)',\n          padding: '1rem',\n          background: 'rgba(0,0,0,0.4)',\n          color: 'white',\n          fontSize: '1rem',\n        }}\n      >\n        PAUSED\n      </div>\n\n      {!gameState.isGameRunning && !gameState.isGamePaused && (\n        <div>\n          <Overlay gameState={gameState} startNewGame={startNewGame} />\n        </div>\n      )}\n\n      {/* <span style={{fontFamily: 'mono'}}>{JSON.stringify(gameState, null, 2)}</span> */}\n    </div>\n  )\n}\n\nTetris.defaultProps = {\n  rows: 20,\n  columns: 10,\n}\n\nexport default Tetris\n","import React from 'react'\nimport './App.css'\nimport Tetris from './Tetris/Tetris'\n/** @jsx jsx */\nimport {jsx} from '@emotion/core'\nimport GithubImage from './assets/github.svg'\n\nconst App: React.FC = () => {\n  return (\n    <div\n      css={{\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        overflowX: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          height: 50,\n          color: '#CCC',\n          fontWeight: 'bold',\n          padding: 4,\n          display: 'flex',\n          justifyContent: 'flex-end',\n        }}\n      >\n        SLICK TETRIS Beta 0.1{' '}\n        <a href=\"https://github.com/nitinja/slick-tetris\">\n          <img src={GithubImage} alt=\"Github Codebase\" css={{width: '1rem', height: '1rem', margin: '0 1rem'}}></img>\n        </a>\n      </div>\n      <div css={{flex: 1}}>\n        <Tetris rows={20} columns={10}></Tetris>\n      </div>\n      <div\n        css={{\n          color: '#ccc',\n          // borderTop: '1px solid #CCC',\n          backgroundColor: '#eeeeee47',\n          fontWeight: 'normal',\n          padding: 4,\n          display: 'flex',\n          justifyContent: 'flex-end',\n        }}\n      >\n        <span aria-label=\"peace\" role=\"img\">\n          a game by &nbsp;<a href=\"http://nitinj.com\">NJ</a> 🌿\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.debug(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.debug(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.debug('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.debug('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}